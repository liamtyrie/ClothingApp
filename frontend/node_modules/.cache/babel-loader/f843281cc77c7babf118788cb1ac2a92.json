{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect } from 'react'; // https://usehooks.com/useOnClickOutside/\n\nconst useOnClickOutside = (ref, handler) => {\n  _s();\n\n  useEffect(() => {\n    const listener = event => {\n      // Do nothing if clicking ref's element or descendent elements\n      if (!ref.current || ref.current.contains(event.target)) {\n        return;\n      }\n\n      handler(event);\n    };\n\n    document.addEventListener('mousedown', listener);\n    document.addEventListener('touchstart', listener);\n    return () => {\n      document.removeEventListener('mousedown', listener);\n      document.removeEventListener('touchstart', listener);\n    };\n  }, // Add ref and handler to effect dependencies\n  // It's worth noting that because passed in handler is a new ...\n  // ... function on every render that will cause this effect ...\n  // ... callback/cleanup to run every render. It's not a big deal ...\n  // ... but to optimize you can wrap handler in useCallback before ...\n  // ... passing it into this hook.\n  [ref, handler]);\n};\n\n_s(useOnClickOutside, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\nexport default useOnClickOutside;","map":{"version":3,"sources":["/home/liamtyrie/Desktop/clothes-store/frontend/src/components/utils/onClickOutside.js"],"names":["useEffect","useOnClickOutside","ref","handler","listener","event","current","contains","target","document","addEventListener","removeEventListener"],"mappings":";;AAAA,SAASA,SAAT,QAA0B,OAA1B,C,CAEA;;AAEA,MAAMC,iBAAiB,GAAG,CAACC,GAAD,EAAMC,OAAN,KAAkB;AAAA;;AAC3CH,EAAAA,SAAS,CACR,MAAM;AACL,UAAMI,QAAQ,GAAIC,KAAD,IAAW;AAC3B;AACA,UAAI,CAACH,GAAG,CAACI,OAAL,IAAgBJ,GAAG,CAACI,OAAJ,CAAYC,QAAZ,CAAqBF,KAAK,CAACG,MAA3B,CAApB,EAAwD;AACvD;AACA;;AAEDL,MAAAA,OAAO,CAACE,KAAD,CAAP;AACA,KAPD;;AASAI,IAAAA,QAAQ,CAACC,gBAAT,CAA0B,WAA1B,EAAuCN,QAAvC;AACAK,IAAAA,QAAQ,CAACC,gBAAT,CAA0B,YAA1B,EAAwCN,QAAxC;AAEA,WAAO,MAAM;AACZK,MAAAA,QAAQ,CAACE,mBAAT,CAA6B,WAA7B,EAA0CP,QAA1C;AACAK,MAAAA,QAAQ,CAACE,mBAAT,CAA6B,YAA7B,EAA2CP,QAA3C;AACA,KAHD;AAIA,GAlBO,EAmBR;AACA;AACA;AACA;AACA;AACA;AACA,GAACF,GAAD,EAAMC,OAAN,CAzBQ,CAAT;AA2BA,CA5BD;;GAAMF,iB;;AA8BN,eAAeA,iBAAf","sourcesContent":["import { useEffect } from 'react'\n\n// https://usehooks.com/useOnClickOutside/\n\nconst useOnClickOutside = (ref, handler) => {\n\tuseEffect(\n\t\t() => {\n\t\t\tconst listener = (event) => {\n\t\t\t\t// Do nothing if clicking ref's element or descendent elements\n\t\t\t\tif (!ref.current || ref.current.contains(event.target)) {\n\t\t\t\t\treturn\n\t\t\t\t}\n\n\t\t\t\thandler(event)\n\t\t\t}\n\n\t\t\tdocument.addEventListener('mousedown', listener)\n\t\t\tdocument.addEventListener('touchstart', listener)\n\n\t\t\treturn () => {\n\t\t\t\tdocument.removeEventListener('mousedown', listener)\n\t\t\t\tdocument.removeEventListener('touchstart', listener)\n\t\t\t}\n\t\t},\n\t\t// Add ref and handler to effect dependencies\n\t\t// It's worth noting that because passed in handler is a new ...\n\t\t// ... function on every render that will cause this effect ...\n\t\t// ... callback/cleanup to run every render. It's not a big deal ...\n\t\t// ... but to optimize you can wrap handler in useCallback before ...\n\t\t// ... passing it into this hook.\n\t\t[ref, handler]\n\t)\n}\n\nexport default useOnClickOutside\n"]},"metadata":{},"sourceType":"module"}